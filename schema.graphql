# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CardEntity {
    id: String!
    login: String!
    nfcTag: String!
}

type CardHistoryEntity {
    eventType: CardEventType!
    id: String!
    ownerLogin: String!
    userId: String!
}

type CourseType {
    code: String!
    old_title: String!
    shortcode_school: String!
    students: String!
    title: String!
}

type FilterDetailsType {
    courses: [CourseType!]
    filterType: String!
    promos: [PromoType!]
    years: [ScolarYearType!]
}

type IntranetUserType {
    credits: Float!
    firstname: String!
    flags: UserFlag!
    gpa: [UserGpa!]
    groups: [UserGroup!]
    internal_email: String!
    lastname: String!
    list_history: [UserListHistory!]!
    location: String!
    login: String!
    missed: [UserMissed!]!
    modules: [UserModule!]!
    notes: [UserNote!]!
    picture: String!
    promo: Float!
    scolaryear: String!
    semester: Float!
    spice: UserSpice!
    title: String!
    userinfo: UserInfo
}

type ModuleType {
    date_inscription: String!
    timeline_barre: String!
    timeline_end: String!
    timeline_start: String!
    title: String!
    title_link: String!
}

type Mutation {
    cardRemove(email: String!): Boolean!
    cardUpdateForLogin(email: String!, nfcTag: String!): CardEntity!
    deviceRegister(identifier: String!, platform: String!, token: String!): Boolean!
    settingsUpdate(settings: [SettingUpdateInput!]!): [SettingEntity!]!
    userLinkToIntranet(jwtToken: String!, userId: String!): Boolean!
}

type PromoType {
    promo: String!
    promo_deprecated: String!
    students: String!
}

type Query {
    cardGetFilterValues(details: FilterDetailsInput!): FilterDetailsType!
    cardGetUsersByFilters(filters: PromoFetchInput!): [TrombiUserType!]!
    cardHistoryByLogin(email: String!): [CardHistoryEntity!]!
    moduleCurrent: [ModuleType!]!
    settingsGetAll: [SettingEntity!]!
    userConfirmEmailCode(code: String!, email: String!): UserEntity!
    userGetIconLinkByPicture(picture: String!): String!
    userGetUser: IntranetUserType!
    userIsAuthorized: Boolean!
    userSendEmailCode(email: String!): Boolean!
}

type ScolarYearType {
    scolaryear: String!
    students: String!
}

type SettingEntity {
    id: String!
    setting: String!
    user: UserEntity!
    userId: String!
    value: String!
}

type TrombiUserType {
    card: CardEntity
    cardHistory: [CardHistoryEntity!]
    location: String!
    login: String!
    nom: String!
    picture: String
    prenom: String!
    title: String!
}

type UserEntity {
    email: String!
    id: String!
    intraToken: UserIntraTokenEntity
    lastDeviceIdentifier: String
    status: String!
    verificationCode: String
    verificationCodeExpiration: DateTime
}

type UserFlag {
    difficulty: UserFlagValue!
    ghost: UserFlagValue!
    medal: UserFlagValue!
    remarkable: UserFlagValue!
}

type UserFlagValue {
    label: String!
    modules: [UserFlagValueModule!]!
    value: Float!
}

type UserFlagValueModule {
    barrage: Float!
    codeinstance: String!
    codemodule: String!
    credits: Float!
    cycle: String!
    date_ins: String!
    flags: String!
    grade: String!
    id_instance: String!
    instance_id: String!
    module_rating: String!
    scolaryear: Float!
    semester: Float!
    title: String!
}

type UserGpa {
    cycle: String!
    gpa: String!
}

type UserGroup {
    count: Float!
    name: String!
    title: String!
}

type UserInfo {
    country: UserInfoValue!
    telephone: UserInfoValue!
    website: UserInfoValue!
}

type UserInfoValue {
    adm: Boolean!
    public: Boolean!
    value: String!
}

type UserIntraTokenEntity {
    expire: String!
    id: String!
    token: String!
    userId: String!
}

type UserListHistory {
    comment: String!
    course_code: String!
    date: String!
    location: String!
    modifier: String!
    promo: Float!
    scolaryear: Float!
    semester: Float!
}

type UserMissed {
    acti_title: String!
    begin: String!
    categ_title: String!
    end: String!
    link_event: String!
    link_module: String!
    module_title: String!
    recent: String!
}

type UserModule {
    barrage: Float!
    codeinstance: String!
    codemodule: String!
    credits: Float!
    cycle: String!
    date_ins: String!
    flags: String!
    grade: String!
    id_instance: String!
    id_user_history: String!
    instance_id: String!
    module_rating: String!
    scolaryear: Float!
    semester: Float!
    title: String!
}

type UserNote {
    codeacti: String!
    codeinstance: String!
    codemodule: String!
    date: String!
    final_note: Float!
    scolaryear: Float!
    title: String!
}

type UserSpice {
    available_spice: String!
    consumed_spice: String
}

enum CardEventType {
    DELETE
    NEW
    REPLACE
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

input FilterDetailsInput {
    course: String
    filter: String!
    scolaryear: String
}

input PromoFetchInput {
    course: String!
    promo: String!
    year: String
}

input SettingUpdateInput {
    setting: String!
    value: String!
}
